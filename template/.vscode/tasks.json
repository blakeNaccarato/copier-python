// Calling `pwsh` first leverages my personal $PROFILE to activate `.venv`.
// Alternatively, we could use `.venv/Scripts/python.exe` and change the `args`, but
// this is platform-specific anyways.

{
  "version": "2.0.0",
  "inputs": [
    {
      "id": "templateOptions",
      "description": "Template options.",
      "type": "pickString",
      "options": [
        "",
        "-Defaults",
        "-Recopy",
        "-Recopy -Defaults",
        "-Defaults -NoVerify",
        "-Recopy -NoVerify",
        "-Recopy -Defaults -NoVerify"
      ]
    }
  ],
  "tasks": [
    {
      "label": "dvc: repro",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "dvc repro ${input:stage}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: repro force",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "dvc repro --force ${input:stage}",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },
    {
      "label": "dvc: dag",
      "dependsOrder": "sequence",
      "dependsOn": ["dvc: synchronize params"],
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "(dvc dag --md) -Replace 'mermaid', '{mermaid}' > docs/dag.md && . '~/.local/nodeenvs/markdownlint/Scripts/Activate.ps1' && markdownlint --fix docs/dag.md",
      "icon": { "id": "graph" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * PROJECT SETUP * //

    {
      "label": "setup: Copy template",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": "scripts/Copy-Template.ps1 ${input:templateOptions}",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Setup or sync virtual environment",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": "scripts/Sync-Py.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": [],
      "runOptions": { "runOn": "folderOpen" }
    },
    {
      "label": "setup: Perform first-time setup",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh" } },
      "command": "first_time_setup.ps1",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Remove *.rej",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "Get-ChildItem -Recurse -Filter *.rej | Remove-Item",
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * PRE-COMMIT * //

    {
      "label": "pre-commit",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "pre-commit",
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },
    {
      "label": "pre-commit: all",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "pre-commit run --all-files",
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * GIT * //

    {
      "label": "git: Rebase back to fork",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "git rebase -i --fork-point main",
      "icon": { "id": "git-branch" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * OTHER TASKS * //

    {
      "label": "task: Run pytest with coverage",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "pytest --cov --cov-report xml",
      "icon": { "id": "check" },
      "problemMatcher": []
    },
    {
      "label": "task: run core update",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python scripts/core_update.py",
      "icon": { "id": "check" },
      "problemMatcher": []
    },
    {
      "label": "task: Run ruff",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "ruff check .; ruff format .",
      "icon": { "id": "check" },
      "problemMatcher": []
    },
    {
      "label": "task: sphinx-autobuild docs (preview)",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "sphinx-build -EaT docs _site; sphinx-autobuild -T docs _site --ignore *params.yaml --ignore *params_schema.json --ignore apidocs --ignore data",
      "icon": { "id": "book" },
      "problemMatcher": []
    },
    {
      "label": "task: profile this file",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "python -m cProfile -o .prof ${file}",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    },
    {
      "label": "task: view profile results with snakeviz",
      "type": "shell",
      "options": { "shell": { "executable": "pwsh", "args": ["-Command"] } },
      "command": "snakeviz .prof",
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    }
  ]
}
